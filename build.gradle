plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
}

group = 'br.dev.marcoalmeida'
version = '0.0.1-SNAPSHOT'

ext {
	set('testcontainersVersion', "1.17.6")
}

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

processTestResources{
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}


sourceSets{
	test{
		java {
			srcDirs = ["src/test/java"]
		}
		resources.srcDir file("src/test/resources")
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator:3.0.12'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.0.12'
	implementation 'org.springframework.boot:spring-boot-starter-security:3.0.12'
	implementation 'org.springframework.boot:spring-boot-starter-web:3.0.12'
	implementation 'org.springframework.session:spring-session-core'
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.12'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.4'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
	implementation 'javax.servlet:javax.servlet-api:4.0.1'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mock-server:mockserver-spring-test-listener:5.15.0'
	testImplementation 'org.testcontainers:junit-jupiter'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()

	testLogging {
		showStandardStreams = true

	}


	finalizedBy jacocoTestReport

	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"br/dev/marcoalmeida/mb/MbApplication.class",
					"**/**DTO.class"
			])
		}))
	}

	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}